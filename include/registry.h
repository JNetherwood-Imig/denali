#pragma once

#include "dwl/defines.h"
#include "dwl/display.h"
#include "protocol.h"
#include "vector.h"

// This is probably not a good way to do things,
// but it shouldn't ever be problematic,
// since the longest interface I could find was 47 characters,
// 48 including '\0'
#define INTERFACE_MAX_LEN 64U

typedef struct RegistryGlobal {
    u32 name;
    u32 version;
    char interface[INTERFACE_MAX_LEN];
} RegistryGlobal;

typedef struct Registry {
    ID id;
    Vector(RegistryGlobal) globals;
    DwlDisplay* display;
} Registry;

typedef struct Object {
    ID id;
    RegistryGlobal global;
    u32 bound_version;
    DwlDisplay* display;
} Object;

void registry_bind(const Registry* const self, const RegistryGlobal* const global,
                   const u32 version, Object* const object);

const RegistryGlobal* registry_lookup_interface(const Registry* const self,
                                                const char* const interface);

// handlers, should probably be placed in separate registry_protocol.h file which is
// autogenerated from xml
void registry_handle_global(Registry* const self, const u32 name,
                            const char* const interface, const u32 version);

void registry_handle_global_remove(Registry* const self, const u32 name);
